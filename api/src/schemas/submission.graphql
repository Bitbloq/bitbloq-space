# import Date, ObjectID from "./scalars.graphql"
# import Exercise from "./exercise.graphql"

directive @authRequired(
  requires: Role = ADMIN,
) on QUERY | FIELD

enum Role {
  ADMIN
  USER
  EPHEMERAL
}

type Query {
  submissions: [Submission]                                 @authRequired(requires: USER)
  submission(id: ObjectID!): Submission                     @authRequired(requires: EPHEMERAL, requires: USER)
  submissionsByExercise(exercise: ObjectID!): [Submission]  @authRequired(requires: USER)
}
type Mutation {
  createSubmission(exerciseCode: String!, studentNick: String!): createOut
  updateSubmission(input: SubmissionIn): Submission                         @authRequired(requires: EPHEMERAL)
  finishSubmission(content: String, comment: String): Submission            @authRequired(requires: EPHEMERAL)
  cancelSubmission: Submission                                              @authRequired(requires: USER)
  deleteSubmission(submissionID: ObjectID!): Submission                     @authRequired(requires: USER)
}
type Subscription {
  submissionUpdated(exercise: ObjectID!): Submission   @authRequired(requires: USER)
}

type Submission {
  id: ObjectID
  title: String
  exercise: ObjectID
  user: ObjectID
  document: ObjectID
  studentNick: String
  content: String
  submissionToken: String
  finished: Boolean
  comment: String
  type: String
  createdAt: Date
  updatedAt: Date
  finishedAt: Date
}
input SubmissionIn {
  title: String
  finished: Boolean
  comment: String
  studentNick: String
}
type createOut {
  token: String
  type: String
  submissionID: ObjectID
  exerciseID: ObjectID
}
